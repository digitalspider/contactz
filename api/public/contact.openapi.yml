openapi: 3.0.0
info:
  version: "1.0"
  title: contact-public-api
  description: Contact Public APIs
tags:
  - name: "user"
  - name: "account"
  - name: "contact"
  - name: "address"
  - name: "group"
  - name: "tag"

# AWS Validators
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: params-only # Default

servers:
  - url: https://api.contactz.com.au/v1
    description: Production server

security:
  - BearerAuth: []
paths:
  /user/register:
    post:
      tags:
        - "user"
      operationId: RegisterUser
      description: |
        Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userLogin"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /user/login:
    post:
      tags:
        - "user"
      operationId: LoginUser
      description: |
        Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userLogin"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  /contact:
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "contact"
      operationId: ListContacts
      description: |
        List all contact in the database
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contactList"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    post:
      tags:
        - "contact"
      operationId: CreateContact
      description: |
        Creates a new Contact in the Database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contact"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contactResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /contact/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the contact
        schema:
          $ref: "#/components/schemas/entityId"
        required: true
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "contact"
      operationId: GetContact
      description: |
        Get the specified contact
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contact"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    put:
      tags:
        - "contact"
      operationId: UpdateContact
      description: |
        Update the specified contact
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contact"
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    delete:
      tags:
        - "contact"
      operationId: DeleteContact
      description: |
        Delete a contact
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  /address:
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "address"
      operationId: ListAddresses
      description: |
        List all address in the database
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addressList"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    post:
      tags:
        - "address"
      operationId: CreateAddress
      description: |
        Creates a new Address in the Database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/address"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addressResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /address/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the address
        schema:
          $ref: "#/components/schemas/entityId"
        required: true
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "address"
      operationId: GetAddress
      description: |
        Get the specified address
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/address"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    put:
      tags:
        - "address"
      operationId: UpdateAddress
      description: |
        Update the specified address
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/address"
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    delete:
      tags:
        - "address"
      operationId: DeleteAddress
      description: |
        Delete a address
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  /account:
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "account"
      operationId: ListAccounts
      description: |
        List all accounts in the database
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accountList"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    post:
      tags:
        - "account"
      operationId: CreateAccount
      description: |
        Creates a new Account in the Database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/accountResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /account/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the account
        schema:
          $ref: "#/components/schemas/entityId"
        required: true
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "account"
      operationId: GetAccount
      description: |
        Get the specified account
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    put:
      tags:
        - "account"
      operationId: UpdateAccount
      description: |
        Update the specified account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    delete:
      tags:
        - "account"
      operationId: DeleteAccount
      description: |
        Delete a account
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  /tag:
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "tag"
      operationId: ListTags
      description: |
        List all tags in the database
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tagList"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    post:
      tags:
        - "tag"
      operationId: CreateTag
      description: |
        Creates a new Tag in the Database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tagResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /tag/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the tag
        schema:
          $ref: "#/components/schemas/entityId"
        required: true
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "tag"
      operationId: GetTag
      description: |
        Get the specified tag
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tag"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    put:
      tags:
        - "tag"
      operationId: UpdateTag
      description: |
        Update the specified tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tag"
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    delete:
      tags:
        - "tag"
      operationId: DeleteTag
      description: |
        Delete a tag
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

  /group:
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "group"
      operationId: ListGroup
      description: |
        List all groups in the database
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groupList"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    post:
      tags:
        - "group"
      operationId: CreateGroup
      description: |
        Creates a new Group in the Database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groupResponse"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
  /group/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the group
        schema:
          $ref: "#/components/schemas/entityId"
        required: true
    options:
      tags:
        - "CORS"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {'statusCode': 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
    get:
      tags:
        - "group"
      operationId: GetGroup
      description: |
        Get the specified group
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/group"
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    put:
      tags:
        - "group"
      operationId: UpdateGroup
      description: |
        Update the specified group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/group"
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations
    delete:
      tags:
        - "group"
      operationId: DeleteGroup
      description: |
        Delete a group
      responses:
        200:
          description: success
        400:
          description: The request couldn't be parsed or validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiError"
        401:
          description: The request authorization is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiUnauthorized"
      security:
        - user-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFunction.Arn}/invocations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    user-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        identitySource: method.request.header.Authorization
        authorizerUri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/{{resolve:secretsmanager:${AuthSecretName}:SecretString:auth-arn}}/invocations
          # Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AuthLambdaFunctionName}/invocations
        authorizerResultTtlInSeconds: 0
  schemas:
    entityId:
      type: string
      description: The id of the entity
      pattern: "^[a-zA-Z0-9|-]{0,64}}$"
      readOnly: true
      example: "123"
    jwtClaims:
      type: object
      description: The claims of the JWT
      readOnly: true
      properties:
        issuer:
          type: string
          description: The name of who issued this jwt
          example: https://api.contactz.com.au
        sub:
          type: string
          description: the user uuid this JWT is associated with
        aud:
          type: object
          description: the account this JWT is associated with
          properties:
            account:
              type: object
              properties:
                uuid:
                  type: string
                role:
                  type: string
                domain:
                  type: string
        exp:
          type: string
          description: the expiry of the JWT
          example: 4h
    userLogin:
      type: object
      description: Information required to create a new account
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The username of the account
          nullable: false
        password:
          type: string
          description: The password of the account
          nullable: false
    userResponse:
      type: object
      description: Structure of the user information
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
        username:
          type: string
          description: The username of the user
        contact_id:
          type: string
          description: The uuid of the associated contact
        token:
          type: string
          description: The JWT token for this user
        account:
          $ref: "#/components/schemas/account"

    contact:
      type: object
      description: Structure of the contact information
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
        external_id:
          type: string
          description: Optional Client provided ID for the given contact. Must be unique.
          maxLength: 64
        name:
          type: string
          description: The actual full name of this contact
          nullable: false
          maxLength: 64
        preferred_name:
          type: string
          description: The preferred name of this contact
          maxLength: 64
        email:
          type: string
          description: The email of this contact
          maxLength: 64
        mobile:
          type: string
          description: The mobile of this contact
          maxLength: 64
        notes:
          type: string
          description: Additional notes for this contact
        address:
          $ref: "#/components/schemas/address"
        gender:
          $ref: "#/components/schemas/genderEnum"
        date_birth:
          $ref: "#/components/schemas/dateFormat"
        date_wedding:
          $ref: "#/components/schemas/dateFormat"
        date_death:
          $ref: "#/components/schemas/dateFormat"
        tags:
          type: array
          items:
            type: number
            description: the IDs of the tags
        groups:
          type: array
          items:
            type: number
            description: the IDs of the groups
      required:
        - name
    contactResponse:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
    contactList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/contact"
    address:
      type: object
      description: Structure of the address information
      required:
        - street
        - state
        - postcode
      properties:
        street:
          type: string
          description: The street address
        suburb:
          type: string
          description: The suburb
          example: Toongabbie
        state:
          type: string
          description: The state, one of NSW, VIC, WA, QLD, NT, TAS or ACT
          pattern: ^(NSW|VIC|WA|QLD|NT|TAS|ACT)$
          example: NSW
          nullable: true
        postcode:
          type: string
          description: The four digit (AU) postcode
          pattern: "^[0-9]{4}$"
          example: "2145"
        country_code:
          type: string
          description: The ISO 3166 Alpha-2 country code. Australia is AU
          pattern: ^([A-Z]{2}|[a-z]{2})$
          example: AU
    genderEnum:
      type: string
      description: The contacts gender. Either male, female
      enum:
        - male
        - female
    dateFormat:
      type: string
      description: A date in YYYY-MM-DD format.
      pattern: ^\d{4}-[01]\d-[0-3]\d$
      example: "2020-12-25"
    addressResponse:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
    addressList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/address"
    account:
      type: object
      description: Structure of the account information
      required:
        - name
        - domain
      properties:
        name:
          type: string
          description: The name of the account
          nullable: false
        domain:
          type: string
          description: The domain name of the account
          nullable: false
        email_domain:
          type: string
          description: The email domain of the account
          nullable: false
    accountResponse:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
    accountList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/account"
    tag:
      type: object
      description: Structure of the tag
      required:
        - label
      properties:
        label:
          type: string
          description: The street address
    tagResponse:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
    tagList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/tag"

    group:
      type: object
      description: Structure of the group
      required:
        - label
      properties:
        label:
          type: string
          description: The label of the group
    groupResponse:
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/entityId"
    groupList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/group"

    apiError:
      type: object
      properties:
        message:
          type: string
          description: The error message
        code:
          type: string
          description: The error code
          example: E00001
        timestamp:
          type: string
          format: date-time
          description: The timestamp that the error occurred
        details:
          type: string
          description: Optional additional error details
          nullable: true
      required:
        - message
        - timestamp
    apiUnauthorized:
      type: object
      properties:
        message:
          type: string
          description: The error message
          example: Unauthorized
      required:
        - message
